API Gateway.
  Fallacies of distribuited computing.
  Accesing from public internet, will.  
    Expose out internal API
    Security 
    CORS Required
    Multiple Trips, multiple calls to generate a response
    Different clients have different needs, client have specific needs to assemble the content. We need to adapt the content for client.

API Gateway
  Single point of contact, you will have deployed there the custom API, one point to protect, 
  Consolidate the calls in just one
  Can have some caching mechanism.
  Facade to the real services, reduce the # of calls from the client, 
  Routes call to specific services
  Handled security
  Protocol translation
  Optimizes calls / Link expansion (HATEOAS)
  
Zuul
  Part of Netflix.
  Routing and Filtering
  Can be used for many API Gateway needs.
  Routing - send request to real server (Reverse Proxy) - --  Add a mapped url and redirect to the service_port
  @EnableZuulProxy.
  1. Register with eureka and collects all the client-ids  /subject to call subject service.
     Calls are automatically load balancing
     Calls are circuit breakers as weell
     
     zuul:
      prefix:/api
      ignored-services: verb (*)
      routes:
        subject:
          path:/setence-subject/**
        noun:
          path:/nound/**
  
  Zull missing caching, protocol-translation, resource expansion/link resolution
  
  
======  Caching   =============

Client Cache - automatic if we use some headers, expire headers and 
Server Cache - 
    API Gateway
    Backend Service
    Method Caching
      Provide Caching Abstraction, we need to use @EnableCacheable
      @Cacheable annotation, describe the cache and key [ @Cacheable(value = "inventory", key="#sku") ]
      Use a cache manager - syncronizedMaps, Ehcache, Gemfire
      Drawback, cache policy should ideally be considered and expriring
  
  Etags
    Client ask resources and the header comes with the etag, generate a hash
    if-none-match, check the content and try to return the same, if it matches just send 304 if not 200 + content + etag
    Purpose is save bandwitdh, but there is no reduction for server work, only economy in network activity
    Shallow etags in server side
      @Bean
      public Filter shallowEtagHeaderFilter(){
        return new ShallowEtagHeaderFilter();
      }
    Client side
      CacheConfig cacheConfig = CacheConfig.custom().setMaxCacheEntries().setMaxObjectSize().build();
      CloaseableHttpClient cachingClient =  CachingHttpClients.custom().setCacheConfig(cacheConfig).build();
      RestTemplate template = new RestTemplate(new HttpComponenetsClientHttpRequestFactory(cachingClient));
      Feign does not support caching capabilities
      
      

===== Resource expansion ========

Resource Link Expansion is being implemented by HATEOAS (hypermedia as the engine of application state)
Gateway will be undoing the HATEOS, our gateway do the call instead of the client who could be innefiecntly
Option
  Traverson, traversing link automatically, so you dont need to follow it as a matter of code
             traversal not the expansion, limited capability with other formats, no support XML
             you need to include spring-hateoas and json-path
             1. Create Resources for you domain objects like.
                  public class PlayerResources extends Resources<Resource<Player>>{}
                  Traverson traverson = new Traverson(new URI(), MediTypes.HAL_JSON)
                  PlayerResources players = traverson.follow($href,$href2).toObject(PlayerResources.class)
                  Resource<Player> = players.getContent()
  Resource Expansion Option
      Spring Data Rest projection cause links to be inlined and expanded
            1. Define an interface annotated like
              @Projection(name=projectionName, types={Class.class})
              Call http://host:port/app/1/?projection=projectionName
            Drawbacks
              Only works with spring DAta REST
              Projection are limited to the same microservices.


===== Protocol Translation ========

Translate between front and back end protocols.
  Like HTTP/REST - SOAP - JMS - AMPQ
  We could have adpaters above the microservices
  No quick fixes.
    JmsTemplate
    AmqpTemplate
    WebServiceTemplate
    
    Spring Integration - enterprise integration patterns, via in memory messaging patterns.
    Adapters and Gateways for several technologies. Convert payloads
    Assemble prebuildt integration components, using messages
    Thinking in terms of messages and payload as a API Gateway

